name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: mi-app-html
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Verificar estructura de archivos
      run: |
        echo "📁 Contenido del repositorio:"
        ls -la
        echo ""
        echo "📄 Contenido de index.html:"
        head -20 index.html
        echo ""
        echo "🔍 Verificando si existe el texto requerido:"
        if grep -q "Hola Mundo DevOps" index.html; then
          echo "✅ Texto 'Hola Mundo DevOps' encontrado en index.html"
        else
          echo "❌ Texto 'Hola Mundo DevOps' NO encontrado en index.html"
          exit 1
        fi
        
        if grep -q "funcionando correctamente" index.html; then
          echo "✅ Texto 'funcionando correctamente' encontrado en index.html"
        else
          echo "❌ Texto 'funcionando correctamente' NO encontrado en index.html"
          exit 1
        fi

    - name: Configurar Python para servidor de pruebas
      run: |
        python3 --version

    - name: Ejecutar pruebas con servidor HTTP
      run: |
        # Iniciar servidor en segundo plano
        python3 -m http.server 8080 &
        SERVER_PID=$!
        
        # Esperar a que el servidor inicie
        sleep 5
        
        # Verificar que el servidor está funcionando
        if curl -f http://localhost:8080/index.html; then
          echo "✅ Servidor HTTP funcionando correctamente"
        else
          echo "❌ Error: Servidor HTTP no responde"
          exit 1
        fi
        
        # Ejecutar pruebas verificando el contenido HTML
        echo "🧪 Ejecutando pruebas..."
        
        # Prueba 1: Verificar que el título existe
        if curl -s http://localhost:8080/index.html | grep -q "Hola Mundo DevOps"; then
          echo "✅ Prueba 1 pasó: Título encontrado"
        else
          echo "❌ Prueba 1 falló: Título no encontrado"
          echo "Contenido de la respuesta:"
          curl -s http://localhost:8080/index.html | head -10
          exit 1
        fi
        
        # Prueba 2: Verificar que el estado es correcto
        if curl -s http://localhost:8080/index.html | grep -q "funcionando correctamente"; then
          echo "✅ Prueba 2 pasó: Estado correcto"
        else
          echo "❌ Prueba 2 falló: Estado incorrecto"
          exit 1
        fi
        
        # Prueba 3: Verificar que la página contiene CI/CD
        if curl -s http://localhost:8080/index.html | grep -q "CI/CD"; then
          echo "✅ Prueba 3 pasó: Contenido CI/CD encontrado"
        else
          echo "❌ Prueba 3 falló: Contenido CI/CD no encontrado"
          exit 1
        fi
        
        # Detener servidor
        kill $SERVER_PID
        echo "🎉 Todas las pruebas pasaron correctamente"

  build-and-push:
    name: Construir y publicar imagen Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && success()
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login a Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extraer metadatos para Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=,suffix=,format=short
          type=raw,value=latest

    - name: Construir y publicar imagen Docker
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Verificar imagen publicada
      run: |
        echo "✅ Imagen publicada en Docker Hub: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}"
        echo "📦 Tags: ${{ steps.meta.outputs.tags }}"

  deploy-render:
  name: Desplegar en Render
  runs-on: ubuntu-latest
  needs: build-and-push
  if: github.event_name == 'push' && success()
  
  steps:
  - name: Checkout código
    uses: actions/checkout@v3

  - name: Desplegar en Render usando API
    env:
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
    run: |
      # Verificar credenciales
      if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
        echo "⚠️  Secrets de Render no configurados. Saltando despliegue."
        echo "ℹ️  Configura RENDER_API_KEY y RENDER_SERVICE_ID en GitHub Secrets"
        exit 0
      fi
      
      echo "🚀 Iniciando despliegue en Render..."
      echo "🔑 API Key: ${RENDER_API_KEY:0:8}..."  # Primeros 8 chars por seguridad
      echo "🆔 Service ID: $RENDER_SERVICE_ID"
      
      # Crear archivo JSON con formato exacto
      cat > /tmp/deploy-data.json << 'EOF'
      {
        "clearCache": true
      }
      
      # Verificar que el JSON es válido
      if ! jq empty /tmp/deploy-data.json 2>/dev/null; then
        echo "❌ JSON inválido generado"
        cat /tmp/deploy-data.json
        exit 1
      fi
      
      echo "📋 JSON a enviar:"
      cat /tmp/deploy-data.json
      
      # Realizar la solicitud con timeout y verificación SSL
      response=$(curl -s -w "\n%{http_code}" \
        --max-time 30 \
        -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
        -H "Authorization: Bearer $RENDER_API_KEY" \
        -H "Content-Type: application/json" \
        -H "Accept: application/json" \
        --data-binary @/tmp/deploy-data.json)
      
      # Separar respuesta y código HTTP
      http_code=$(echo "$response" | tail -n1)
      response_body=$(echo "$response" | sed '$d')
      
      echo "📋 Código de respuesta HTTP: $http_code"
      
      if [ "$http_code" -eq 201 ]; then
        # Intentar extraer el ID del deploy de diferentes maneras
        deploy_id=$(echo "$response_body" | grep -o '"id":"[^"]*' | head -1 | cut -d'"' -f4 || echo "unknown")
        if [ -z "$deploy_id" ]; then
          deploy_id=$(echo "$response_body" | jq -r '.id' 2>/dev/null || echo "unknown")
        fi
        
        echo "✅ Despliegue iniciado correctamente"
        echo "🆔 ID de despliegue: $deploy_id"
        echo "👀 Ver progreso: https://dashboard.render.com/web/$RENDER_SERVICE_ID"
        
      elif [ "$http_code" -eq 400 ]; then
        echo "❌ Error 400 - Bad Request"
        echo "📄 Respuesta completa: $response_body"
        echo "🔍 Posibles causas:"
        echo "   - Service ID incorrecto"
        echo "   - API Key inválida o expirada"
        echo "   - Problema con el formato JSON"
        exit 1
        
      elif [ "$http_code" -eq 401 ]; then
        echo "❌ Error 401 - Unauthorized"
        echo "🔍 La API Key es inválida o ha expirado"
        echo "💡 Genera una nueva API Key en Render"
        exit 1
        
      elif [ "$http_code" -eq 404 ]; then
        echo "❌ Error 404 - Not Found"
        echo "🔍 El Service ID no existe o es incorrecto"
        echo "💡 Verifica el Service ID en el dashboard de Render"
        exit 1
        
      else
        echo "❌ Error en el despliegue (Código: $http_code)"
        echo "📄 Respuesta: $response_body"
        exit 1
      fi

  - name: Notificar éxito
    if: success()
    run: |
      echo "🎉 ¡Pipeline completado con éxito!"
      echo "📦 Imagen Docker: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
      echo "🌐 Aplicación desplegada en Render"
