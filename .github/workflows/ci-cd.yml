name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: mi-app-html
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Verificar estructura de archivos
      run: |
        echo "📁 Contenido del repositorio:"
        ls -la
        echo ""
        echo "📄 Contenido de index.html:"
        head -20 index.html
        echo ""
        echo "🔍 Verificando si existe el texto requerido:"
        if grep -q "Hola mundo, esta es la practica final de electiva 2" index.html; then
          echo "✅ Texto 'Hola Mundo DevOps' encontrado en index.html"
        else
          echo "❌ Texto 'Hola Mundo DevOps' NO encontrado en index.html"
          exit 1
        fi
        
        if grep -q "funcionando correctamente" index.html; then
          echo "✅ Texto 'funcionando correctamente' encontrado en index.html"
        else
          echo "❌ Texto 'funcionando correctamente' NO encontrado en index.html"
          exit 1
        fi

    - name: Configurar Python para servidor de pruebas
      run: |
        python3 --version

    - name: Ejecutar pruebas con servidor HTTP
      run: |
        # Iniciar servidor en segundo plano
        python3 -m http.server 8080 &
        SERVER_PID=$!
        
        # Esperar a que el servidor inicie
        sleep 5
        
        # Verificar que el servidor está funcionando
        if curl -f http://localhost:8080/index.html; then
          echo "✅ Servidor HTTP funcionando correctamente"
        else
          echo "❌ Error: Servidor HTTP no responde"
          exit 1
        fi
        
        # Ejecutar pruebas verificando el contenido HTML
        echo "🧪 Ejecutando pruebas..."
        
        # Prueba 1: Verificar que el título existe
        if curl -s http://localhost:8080/index.html | grep -q "Hola Mundo DevOps"; then
          echo "✅ Prueba 1 pasó: Título encontrado"
        else
          echo "❌ Prueba 1 falló: Título no encontrado"
          echo "Contenido de la respuesta:"
          curl -s http://localhost:8080/index.html | head -10
          exit 1
        fi
        
        # Prueba 2: Verificar que el estado es correcto
        if curl -s http://localhost:8080/index.html | grep -q "funcionando correctamente"; then
          echo "✅ Prueba 2 pasó: Estado correcto"
        else
          echo "❌ Prueba 2 falló: Estado incorrecto"
          exit 1
        fi
        
        # Prueba 3: Verificar que la página contiene CI/CD
        if curl -s http://localhost:8080/index.html | grep -q "CI/CD"; then
          echo "✅ Prueba 3 pasó: Contenido CI/CD encontrado"
        else
          echo "❌ Prueba 3 falló: Contenido CI/CD no encontrado"
          exit 1
        fi
        
        # Detener servidor
        kill $SERVER_PID
        echo "🎉 Todas las pruebas pasaron correctamente"

  build-and-push:
    name: Construir y publicar imagen Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && success()
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login a Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extraer metadatos para Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=,suffix=,format=short
          type=raw,value=latest

    - name: Construir y publicar imagen Docker
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Verificar imagen publicada
      run: |
        echo "✅ Imagen publicada en Docker Hub: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}"
        echo "📦 Tags: ${{ steps.meta.outputs.tags }}"

  deploy-render:
    name: Desplegar en Render
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && success()
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Desplegar usando Webhook de Render
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        if [ -z "$RENDER_DEPLOY_HOOK" ]; then
          echo "⚠️ Webhook de Render no configurado."
          echo "ℹ️ Para configurar:"
          echo "  1. Ve a Render > Settings > Deploy Hooks"
          echo "  2. Crea un webhook y copia la URL"
          echo "  3. Agrega RENDER_DEPLOY_HOOK en GitHub Secrets"
          exit 0
        fi
        
        echo "🚀 Activando despliegue via webhook..."
        echo "🔗 URL: ${RENDER_DEPLOY_HOOK:0:50}..."
        
        # Realizar la solicitud al webhook
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$RENDER_DEPLOY_HOOK")
        
        echo "📋 Código de respuesta: $response"
        
        if [ "$response" -eq 200 ] || [ "$response" -eq 201 ]; then
          echo "✅ Despliegue iniciado correctamente via webhook"
          echo "👀 Ver progreso en el dashboard de Render"
        else
          echo "❌ Error al activar webhook. Código: $response"
          echo "💡 Verifica que la URL del webhook sea correcta"
          exit 1
        fi

    - name: Notificar éxito
      if: success()
      run: |
        echo "🎉 ¡Pipeline completado con éxito!"
        echo "📦 Imagen Docker: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "🌐 Despliegue iniciado en Render"
