name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v3

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Instalar servidor HTTP para pruebas
      run: npm install -g http-server

    - name: Ejecutar pruebas
      run: |
        # Iniciar servidor en segundo plano
        http-server -p 8080 . &
        SERVER_PID=$!
        
        # Esperar a que el servidor inicie
        sleep 3
        
        # Ejecutar pruebas verificando el contenido HTML
        echo "Ejecutando pruebas..."
        
        # Prueba 1: Verificar que el t√≠tulo existe
        if curl -s http://localhost:8080/index.html | grep -q "Hola Mundo DevOps"; then
          echo "‚úÖ Prueba 1 pas√≥: T√≠tulo encontrado"
        else
          echo "‚ùå Prueba 1 fall√≥: T√≠tulo no encontrado"
          exit 1
        fi
        
        # Prueba 2: Verificar que el estado es correcto
        if curl -s http://localhost:8080/index.html | grep -q "funcionando correctamente"; then
          echo "‚úÖ Prueba 2 pas√≥: Estado correcto"
        else
          echo "‚ùå Prueba 2 fall√≥: Estado incorrecto"
          exit 1
        fi
        
        # Prueba 3: Verificar que la p√°gina contiene CI/CD
        if curl -s http://localhost:8080/index.html | grep -q "CI/CD"; then
          echo "‚úÖ Prueba 3 pas√≥: Contenido CI/CD encontrado"
        else
          echo "‚ùå Prueba 3 fall√≥: Contenido CI/CD no encontrado"
          exit 1
        fi
        
        # Detener servidor
        kill $SERVER_PID
        
        echo "üéâ Todas las pruebas pasaron correctamente"

  build-and-push:
    name: Construir y publicar imagen Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && success()
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v3

    - name: Login a Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Construir imagen Docker
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mi-app-html:latest .

    - name: Publicar imagen en Docker Hub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/mi-app-html:latest
        echo "‚úÖ Imagen publicada en Docker Hub: ${{ secrets.DOCKERHUB_USERNAME }}/mi-app-html:latest"

  deploy:
    name: Desplegar en Render
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && success()
    
    steps:
    - name: Notificar despliegue
      run: |
        echo "üöÄ Iniciando proceso de despliegue en Render"
        echo "üì¶ Imagen: ${{ secrets.DOCKERHUB_USERNAME }}/mi-app-html:latest"
        
        # En un escenario real, aqu√≠ se incluir√≠a la l√≥gica para desplegar en Render
        # usando la API de Render o el CLI oficial
        
        # Simulamos el despliegue con una espera
        sleep 10
        echo "‚úÖ ¬°Despliegue completado con √©xito!"
        echo "üåê La aplicaci√≥n deber√≠a estar disponible en Render"
