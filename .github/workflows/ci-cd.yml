name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: mi-app-html
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v3

    - name: Verificar estructura de archivos
      run: |
        echo "üìÅ Contenido del repositorio:"
        ls -la
        echo ""
        echo "üìÑ Contenido de index.html:"
        head -20 index.html
        echo ""
        echo "üîç Verificando si existe el texto requerido:"
        if grep -q "Hola Mundo DevOps" index.html; then
          echo "‚úÖ Texto 'Hola Mundo DevOps' encontrado en index.html"
        else
          echo "‚ùå Texto 'Hola Mundo DevOps' NO encontrado en index.html"
          exit 1
        fi
        
        if grep -q "funcionando correctamente" index.html; then
          echo "‚úÖ Texto 'funcionando correctamente' encontrado en index.html"
        else
          echo "‚ùå Texto 'funcionando correctamente' NO encontrado en index.html"
          exit 1
        fi

    - name: Configurar Python para servidor de pruebas
      run: |
        # Usaremos el servidor HTTP integrado de Python
        python3 --version

    - name: Ejecutar pruebas con servidor HTTP
      run: |
        # Iniciar servidor en segundo plano
        python3 -m http.server 8080 &
        SERVER_PID=$!
        
        # Esperar a que el servidor inicie
        sleep 5
        
        # Verificar que el servidor est√° funcionando
        if curl -f http://localhost:8080/index.html; then
          echo "‚úÖ Servidor HTTP funcionando correctamente"
        else
          echo "‚ùå Error: Servidor HTTP no responde"
          exit 1
        fi
        
        # Ejecutar pruebas verificando el contenido HTML
        echo "üß™ Ejecutando pruebas..."
        
        # Prueba 1: Verificar que el t√≠tulo existe
        if curl -s http://localhost:8080/index.html | grep -q "Hola Mundo DevOps"; then
          echo "‚úÖ Prueba 1 pas√≥: T√≠tulo encontrado"
        else
          echo "‚ùå Prueba 1 fall√≥: T√≠tulo no encontrado"
          echo "Contenido de la respuesta:"
          curl -s http://localhost:8080/index.html | head -10
          exit 1
        fi
        
        # Prueba 2: Verificar que el estado es correcto
        if curl -s http://localhost:8080/index.html | grep -q "funcionando correctamente"; then
          echo "‚úÖ Prueba 2 pas√≥: Estado correcto"
        else
          echo "‚ùå Prueba 2 fall√≥: Estado incorrecto"
          exit 1
        fi
        
        # Prueba 3: Verificar que la p√°gina contiene CI/CD
        if curl -s http://localhost:8080/index.html | grep -q "CI/CD"; then
          echo "‚úÖ Prueba 3 pas√≥: Contenido CI/CD encontrado"
        else
          echo "‚ùå Prueba 3 fall√≥: Contenido CI/CD no encontrado"
          exit 1
        fi
        
        # Detener servidor
        kill $SERVER_PID
        echo "üéâ Todas las pruebas pasaron correctamente"

  build-and-push:
    name: Construir y publicar imagen Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && success()
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login a Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extraer metadatos para Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=,suffix=,format=short
          type=raw,value=latest

    - name: Construir y publicar imagen Docker
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Verificar imagen publicada
      run: |
        echo "‚úÖ Imagen publicada en Docker Hub: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}"
        echo "üì¶ Tags: ${{ steps.meta.outputs.tags }}"

  deploy-render:
    name: Desplegar en Render
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && success()
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v3

    - name: Configurar despliegue en Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        # Verificar que tenemos las credenciales necesarias
        if [ -z "$RENDER_API_KEY" ] || [ -z "$SERVICE_ID" ]; then
          echo "‚ö†Ô∏è  Advertencia: No se configuraron los secrets para Render"
          echo "Para desplegar en Render, configura RENDER_API_KEY y RENDER_SERVICE_ID en los secrets de GitHub"
          exit 0
        fi

        echo "üöÄ Iniciando despliegue en Render..."
        
        # Realizar deploy usando la API de Render
        RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
          -X POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          --data '{"clearCache": true}')
        
        if [ "$RESPONSE" -eq 201 ]; then
          DEPLOY_ID=$(cat response.json | grep -o '"id":"[^"]*' | cut -d'"' -f4)
          echo "‚úÖ Despliegue iniciado correctamente. ID: $DEPLOY_ID"
          echo "Puedes ver el progreso en: https://dashboard.render.com/web/$SERVICE_ID"
        else
          echo "‚ùå Error al iniciar el despliegue. C√≥digo de respuesta: $RESPONSE"
          cat response.json
          exit 1
        fi

    - name: Notificar √©xito
      if: success()
      run: |
        echo "üéâ ¬°Pipeline completado con √©xito!"
        echo "üì¶ Imagen Docker: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "üåê Aplicaci√≥n desplegada en Render"
